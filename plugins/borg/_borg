#compdef borg

function _borg-benchmark-crud {
    local curcontext=$curcontext state line ret=1
    local -a arguments

    arguments+=(
        "1:path to repository to benchmark against:_directories"
        "2:path where benchmarking files will be generated:_directories"
    )

    _arguments $arguments[@] && ret=0

    return ret
}

function _borg-benchmark {
    local curcontext=$curcontext state line ret=1
    local -a arguments

    arguments+=(
        ": :->command"
        "*:: :->option-or-keyword"
    )

    _arguments -C $arguments[@] && ret=0

    case $state in
        (command)
            local -a commands

            commands+=(
                "crud:Create, extract, update, delete benchmark"
            )

            _describe -t commands command commands && ret=0
            ;;
        (option-or-keyword)
            curcontext=${curcontext%:*}-$line[1]

            case $line[1] in
                (crud)
                    _borg-benchmark-crud && ret=0
                    ;;
            esac
            ;;
    esac

    return ret
}

function _borg-create {
    local curcontext=$curcontext state line ret=1
    local -a arguments

    # Todo: several characters in a row do not autocomplete
    local status_chars="((\
        A\:\"Regular file, added\" \
        M\:\"Regular file, modified\" \
        U\:\"Regular file, unchanged\" \
        E\:\"Regular file, errored (failed to access/read)\" \
        d\:\"Directory\" \
        b\:\"Block device\" \
        c\:\"Char device\" \
        h\:\"Regular file, hardlink (already seen)\" \
        s\:\"Symlink\" \
        f\:\"Fifo\" \
        i\:\"Data read from stdin\" \
        -\:\"Not backed up; dry run\" \
        x\:\"Not backed up; excluded\" \
        \?\:\"Missing status (file this as a bug!)\" \
        ))"

    local cache_modes="((\
        ctime,size,inode\:\"Default\" \
        mtime,size,inode\:\"Default behaviour of borg versions older than 1.1.0rc4\" \
        ctime,size\:\"Ignore the inode number\" \
        mtime,size\:\"Ignore the inode number\" \
        rechunk,ctime\:\"All files are considered modified - rechunk, cache ctime\" \
        rechunk,mtime\:\"All files are considered modified - rechunk, cache mtime\" \
        disabled\:\"Disable the cache, all files considered modified - rechunk\" \
        ))"

    local compressions="((\
        none\:\"Do not compress\" \
        lz4\:\"Very fast, very poor compression (default)\" \
        zstd\:\"Modern wide-range algorithm. Can take compression level 1-22 (e.g. zstd,5; default\\: 3)\" \
        zlib\:\"Medium speed, medium compression. Can take compression level 0-9 (e.g. zlib,5; default\\: 6; level 0 is pointless)\" \
        lzma\:\"Low speed, high compression. Can take compression level 0-9 (e.g. lzma,5; default\\: 6; level >6 is wasteful and pointless)\" \
        auto\:\"Heuristic choice; uses \\\"none\\\" for incompressible data, given algorithm otherwise (e.g. auto,lzma or auto,zstd,9)\"
        ))"

    arguments+=(
        "(-s --stats -n --dry-run)"{-n,--dry-run}"[Do not create an archive]"
        "(-s --stats -n --dry-run)"{-s,--stats}"[Print statistics of created archive]"
        "--list[Output verbose list of items]"
        "--json[Output stats as JSON. Implies --stats.]"
        "--no-cache-sync[EXPERIMENTAL: do not synchronize the cache. Implies not using the files cache.]"
        "--no-files-cache[EXPERIMENTAL: do not load/update the cache used to detect unchanged files]"
        "--stdin-name[use NAME in archive for stdin data (default: \"stdin\")]:name:()"
        "--filter=[Only display items with the given status characters]:status characters:$status_chars"
        "(-e --exclude)"{-e,--exclude}"[Exclude paths matching PATTERN]:exclusion pattern (see \"borg help pattern\"):()"
        "--exclude-from[Read exclude patterns from EXCLUDEFILE, one per line]:path to exclusion file:_files"
        "--pattern[EXPERIMENTAL: include/exclude paths matching PATTERN]:pattern:()"
        "--pattern-from[EXPERIMENTAL: read include/exclude patterns from PATTERNFILE, one per line]:path to patternfile:_files"
        "--exclude-caches[Exclude directories that contain a CACHEDIR.TAG file]"
        "--exclude-if-present[Exclude directories that are tagged by containing a filesystem object with the given NAME]:exclusion tag name:()"
        "(--keep-exclude-tags --keep-tag-files)"{--keep-exclude-tags,--keep-tag-files}"[if tag objects are specified with --exclude-if-present, include the tag objects themselves in the archive]"
        "--exclude-nodump[Exclude files flagged NODUMP]"
        "(-x --one-file-system)"{-x,--one-file-system}"[Stay in the same file system; do not store mount points of other file systems]"
        "--numeric-owner[Only store numeric user and group identifiers]"
        "--noatime[Do not store atime]"
        "--noctime[Do not store ctime]"
        "--nobsdflags[Do not read and store bsdflags (e.g. NODUMP, IMMUTABLE)]"
        "--ignore-inode[Ignore inode data in the cache used to detect unchanged files]"
        "--files-cache[Operate the cache in MODE]:cache mode:$cache_modes"
        "--read-special[Open and read block and char device files as well as FIFOs, and symlinks to them, as if they were regular files]"
        "--comment[Add a comment to the archive]:comment:()"
        "--timestamp[Manually specify the archive creation date/time (UTC, yyyy-mm-ddThh:mm:ss format) or give a reference file/directory]:timestamp:()"
        "(-c --checkpoint-intervals)"{-c,--checkpoint-intervals}"[Write checkpoint every SECONDS seconds (Default: 1800)]:seconds:()"
        "--chunker-params[specify the chunker parameters: CHUNK_MIN_EXP, CHUNK_MAX_EXP, HASH_MASK_BITS, HASH_WINDOW_SIZE (default: 19,23,21,4095)]:chunker params:()"
        "(-C --compression)"{-C,--compression}"[Select compression algorithm (default: lz4)]:compression algorithm:$compressions"
        "1:name of archive to create:_directories"
        "*:paths to archive:_files"
    )

    _arguments -w -s $arguments[@] && ret=0

    return ret
}

function _borg-extract {
    local curcontext=$curcontext state line ret=1
    local -a arguments

    arguments+=(
        "(-n --dry-run)"{-n,--dry-run}"[Do not write any files]"
        "--list[Output verbose list of items]"
        "--numeric-owner[Only obey numeric user and group identifiers]"
        "--nobsdflags[Do not extract/set bsdflags (e.g. NODUMP, IMMUTABLE)]"
        "--stdout[Write all extracted data to stdout]"
        "--sparse[Create holes in output sparse file from all-zero chunks]"
        "(-e --exclude)"{-e,--exclude}"[Exclude paths matching PATTERN]:exclusion pattern (see \"borg help pattern\"):()"
        "--exclude-from[Read exclude patterns from EXCLUDEFILE, one per line]:path to exclusion file:_files"
        "--pattern[EXPERIMENTAL: include/exclude paths matching PATTERN]:pattern:()"
        "--pattern-from[EXPERIMENTAL: read include/exclude patterns from PATTERNFILE, one per line]:path to patternfile:_files"
        "--strip-components[Remove the specified number of leading path elements. Paths with fewer elements will be silently skipped.]:number of components to strip:()"
        "1:name of archive to extract:_directories"
        "*:paths to extract (patterns are supported):_files"
    )

    _arguments -w -s $arguments[@] && ret=0

    return ret
}

function _borg-init {
    local curcontext=$curcontext state line ret=1
    local -a arguments
    local encmodes

    encmodes="((\
        none\:\"No encryption, no authentication (not recommended)\" \
        authenticated\:\"Authenticates repository with HMAC-SHA256\" \
        authenticated-blake2b\:\"Authenticates repository with BLAKE2b-256\" \
        repokey\:\"Encrypts repository with AES-CTR-256 using a passphrase, key is placed in the repository config file\" \
        keyfile\:\"Encrypts repository with AES-CTR-256 using a passphrase, key is placed in a keyfile outside the repository\" \
        repokey-blake2\:\"Encrypts repository with BLAKE2b-256 using a passphrase, key is placed in the repository config file \"
        keyfile-blake2\:\"Encrypts repository with BLAKE2b-256 using a passphrase, key is placed in a keyfile outside the repository \"
        ))"

    arguments+=(
        "--append-only[Create an append-only mode repository]"
        "--make-parent-dirs[Create the parent directories of the repository directory, if they are missing]"
        "--storage-quota[Set storage quota of the new repository (e.g. 5G, 1.5T; default: no quota)]:quota:()"
        "(-e --encryption)"{-e,--encryption}"[Select encryption mode (required)]:encryption mode:$encmodes"
        "1:path where repository will be created:_directories"
    )

    _arguments $arguments[@] && ret=0

    return ret
}

function _borg-key-change-passphrase {
    local curcontext=$curcontext state line ret=1

    _arguments "1:path to repository:_directories" && ret=0

    return ret
}

function _borg-key-export {
    local curcontext=$curcontext state line ret=1
    local -a arguments

    arguments+=(
        "(-)--paper[Create an export suitable for printing and later type-in]"
        "(-)--qr-html[Create an html file suitable for printing and later type-in or qr scan]"
        "1:path to repository:_directories"
        "2:path to write the key to:_files"
    )

    _arguments $arguments[@] && ret=0

    return ret
}

function _borg-key-import {
    local curcontext=$curcontext state line ret=1
    local -a arguments

    arguments+=(
        "(* 2)--paper[Interactively import from a backup done with --paper]"
        "1:path to repository:_directories"
        "2:path to file to read (use \"-\" to read from stdin):_files"
    )

    _arguments $arguments[@] && ret=0

    return ret
}

function _borg-key {
    local curcontext=$curcontext state line ret=1
    local -a arguments

    arguments+=(
        ": :->command"
        "*:: :->option-or-keyword"
    )

    _arguments -C $arguments[@] && ret=0

    case $state in
        (command)
            local -a commands

            commands+=(
                "change-passphrase:Change passphrase of a repository encryption key"
                "export:Export a repository key"
                "import:Restore a previously exported repository key"
            )

            _describe -t commands command commands && ret=0
            ;;
        (option-or-keyword)
            curcontext=${curcontext%:*}-$line[1]:

            case $line[1] in
                (change-passphrase)
                    _borg-key-change-passphrase && ret=0
                    ;;
                (export)
                    _borg-key-export && ret=0
                    ;;
                (import)
                    _borg-key-import && ret=0
                    ;;
            esac
            ;;
    esac

    return ret
}

function _borg {
    local curcontext=$curcontext state line ret=1
    local -a arguments

    local logs="--critical --error --warning --debug --info -v --verbose"

    arguments+=(
        "(: -)"{-h,--help}"[Show help and exit]"
        "(: -)-V[Show Borg version and exit]"
        "($logs)--critical[Work on log level CRITICAL]"
        "($logs)--error[Work on log level ERROR]"
        "($logs)--warning[Work on log level WARNING (default)]"
        "($logs)"{--info,-v,--verbose}"[Work on log level INFO]"
        "($logs)--debug[Enable debug output; log level DEBUG]"
        "(-p --progress)"{-p,--progress}"[Show progress]"
        "--log-json[Output one JSON object per log line instead of formatted text]"
        "--show-version[Show/log borg version]"
        "--show-rc[Show/log returncode]"
        "--consider-part-files[treat part files like normal files (e.g. to list/extract them)]"
        "--lock-wait[Wait at most SECONDS for acquiring a repository/cache lock (default 1)]:seconds:()"
        "--umask[Set umask to M (local and remote; default 0077)]:umask value, e.g. 0077:()"
        "--remote-path[Use PATH as borg executable on the remote (default: \"borg\")]:path on remote:()"
        "--remote-ratelimit[Set remote network upload rate limit in kiByte/s (default: 0=unlimited)]:upload rate:()"
        "--debug-profile[Write execution profile in Borg format into FILE.]:file to write profile to:_files"
        "--rsh[Use this command to connect to the \"borg serve\" process (default: \"ssh\")]:remote shell command:()"
        ": :->command"
        "*:: :->option-or-keyword"
    )

    _arguments -w -s -S -C $arguments[@] && ret=0

    case $state in
        (command)
            local -a commands

            commands+=(
                "init:Initialize a new repository"
                "create:Create a new archive"
                "extract:Extract the contents of an archive"
                "check:Verifies consistency of a repository and its archives"
                "rename:Renames an archive in a repository"
                "list:Lists contents of a repository or archive"
                "diff:Finds differences between archives"
                "delete:Deletes an archive or an entire repository (and its cache)"
                "prune:Prunes a repository"
                "info:Shows info about a repository or archive"
                "mount:Mounts an archive as a FUSE filesystem"
                "unmount:Unmounts a FUSE filesystem mounted with \"borg mount\""
                "key:Keyword for key-related functions"
                "upgrade:Upgrade a local Borg repository"
                "recreate:EXPERIMENTAL: Recreates contents of existing archives"
                "export-tar:Creates a tarball from an archive"
                "serve:Starts repository server process. Not usually used manually."
                "config:Gets and sets options in local repository and cache config files"
                "with-lock:Executes another command with the repository lock held"
                "break-lock:Breaks the repository and cache locks"
                "benchmark:Keyword for the benchmark function"
            )

            _describe -t commands command commands && ret=0
            ;;
        (option-or-keyword)
            curcontext=${curcontext%:*}-$line[1]:

            case $line[1] in
                (benchmark)
                    _borg-benchmark && ret=0
                    ;;
                (create)
                    _borg-create && ret=0
                    ;;
                (extract)
                    _borg-extract && ret=0
                    ;;
                (init)
                    _borg-init && ret=0
                    ;;
                (key)
                    _borg-key && ret=0
                    ;;
            esac
            ;;
    esac

    return ret
}
