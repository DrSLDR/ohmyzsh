#compdef borg

function _borg-benchmark-crud {
    local curcontext=$curcontext state line ret=1
    local -a arguments

    arguments+=(
        "1:path to repository to benchmark against:_files"
        "2:path where benchmarking files will be generated:_files"
    )

    _arguments $arguments[@] && ret=0

    return ret
}

function _borg-benchmark {
    local curcontext=$curcontext state line ret=1
    local -a arguments

    arguments+=(
        ": :->command"
        "*:: :->option-or-keyword"
    )

    _arguments -C $arguments[@] && ret=0

    case $state in
        (command)
            local -a commands

            commands+=(
                "crud:Create, extract, update, delete benchmark"
            )

            _describe -t commands command commands && ret=0
            ;;
        (option-or-keyword)
            curcontext=${curcontext%:*}-$line[1]

            case $line[1] in
                (crud)
                    _borg-benchmark-crud && ret=0
                    ;;
            esac
            ;;
    esac

    return ret
}

function _borg-key {
    local curcontext=$curcontext state line ret=1
    local -a arguments

    arguments+=(
        ": :->command"
        "*:: :->option-or-keyword"
    )

    _arguments -C $arguments[@] && ret=0

    case $state in
        (command)
            local -a commands

            commands+=(
                "change-passphrase:Change passphrase of a repository encryption key"
                "export:Export a repository key"
                "import:Restore a previously exported repository key"
            )

            _describe -t commands command commands && ret=0
            ;;
    esac

    return ret
}

function _borg {
    local curcontext=$curcontext state line ret=1
    local -a arguments

    local logs="--critical --error --warning --debug --info -v --verbose"

    arguments+=(
        "(-)"{-h,--help}"[Show help and exit]"
        "(-)-V[Show Borg version and exit]"
        "($logs)--critical[Work on log level CRITICAL]"
        "($logs)--error[Work on log level ERROR]"
        "($logs)--warning[Work on log level WARNING (default)]"
        "($logs)"{--info,-v,--verbose}"[Work on log level INFO]"
        "($logs)--debug[Enable debug output; log level DEBUG]"
        "(-p --progress)"{-p,--progress}"[Show progress]"
        "--log-json[Output one JSON object per log line instead of formatted text]"
        "--show-version[Show/log borg version]"
        "--show-rc[Show/log returncode]"
        "--consider-part-files[treat part files like normal files (e.g. to list/extract them)]"
        "--lock-wait[Wait at most SECONDS for acquiring a repository/cache lock (default 1)]:seconds:()"
        "--umask[Set umask to M (local and remote; default 0077)]:umask value, e.g. 0077:()"
        "--remote-path[Use PATH as borg executable on the remote (default: \"borg\")]:path on remote:()"
        "--remote-ratelimit[Set remote network upload rate limit in kiByte/s (default: 0=unlimited)]:upload rate:()"
        "--debug-profile[Write execution profile in Borg format into FILE.]:file to write profile to:_files"
        "--rsh[Use this command to connect to the \"borg serve\" process (default: \"ssh\")]:remote shell command:()"
        ": :->command"
        "*:: :->option-or-keyword"
    )

    _arguments -w -s -S -C $arguments[@] && ret=0

    case $state in
        (command)
            local -a commands

            commands+=(
                "init:Initialize a new repository"
                "create:Create a new archive"
                "extract:Extract the contents of an archive"
                "check:Verifies consistency of a repository and its archives"
                "rename:Renames an archive in a repository"
                "list:Lists contents of a repository or archive"
                "diff:Finds differences between archives"
                "delete:Deletes an archive or an entire repository (and its cache)"
                "prune:Prunes a repository"
                "info:Shows info about a repository or archive"
                "mount:Mounts an archive as a FUSE filesystem"
                "unmount:Unmounts a FUSE filesystem mounted with \"borg mount\""
                "key:Keyword for key-related functions"
                "upgrade:Upgrade a local Borg repository"
                "recreate:EXPERIMENTAL: Recreates contents of existing archives"
                "export-tar:Creates a tarball from an archive"
                "serve:Starts repository server process. Not usually used manually."
                "config:Gets and sets options in local repository and cache config files"
                "with-lock:Executes another command with the repository lock held"
                "break-lock:Breaks the repository and cache locks"
                "benchmark:Keyword for the benchmark function"
            )

            _describe -t commands command commands && ret=0
            ;;
        (option-or-keyword)
            curcontext=${curcontext%:*}-$line[1]:

            case $line[1] in
                (benchmark)
                    _borg-benchmark && ret=0
                    ;;
                (key)
                    _borg-key && ret=0
                    ;;
            esac
            ;;
    esac

    return ret
}
